//
//  PostInteractor.swift
//  FirstExampleCleanSwift
//
//  Created by ely.assumpcao.ndiaye on 01/06/19.
//  Copyright (c) 2019 ely.assumpcao.ndiaye. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PostBusinessLogic
{
    func doLoadInitialData(request: PostScene.Load.Request)
    func doLoadComments(request: PostScene.Comments.Request)
    
}
//Protocolo responsavel por transportar dados que vao ser enviados ou recebidos na viewControler
protocol PostDataStore
{
    var postId: Int { get set }
}

class PostInteractor: PostBusinessLogic, PostDataStore
{
    var presenter: PostPresentationLogic?
    var worker: PostWorker?
    var postId: Int = 0
    
    // MARK: Do something
    //Chamanda vinda la da ViewControler pro Interactor
    func doLoadInitialData(request: PostScene.Load.Request){
        worker = PostWorker()
        //AÃ§ao que o work deve fazer antes do interactor enviar pro PRESENTER
        worker?.fetchPosts(completionHandler: { (posts) in
            //Prepara uma resposta que vai ser enviada para o PRESENTER
            //Response serve para mandar os posts
            let response = PostScene.Load.Response(posts:posts)
            self.presenter?.presentSomething(response: response)
        })
        
    }
    
    func doLoadComments(request: PostScene.Comments.Request ) {
        let post = request.post
        //Modifica o postId com o novo post recebido atraves do request da model
        postId = post.id
        //Chamada da response passando o
        let response = PostScene.Comments.Response()
        presenter?.presentComments(response: response)
    }
}
